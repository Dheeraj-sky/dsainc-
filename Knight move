// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
int minStepToReachTarget(vector<int>&KnightPos,vector<int>&TargetPos,int n)
	{
 int x = KnightPos[0];
        int y = KnightPos[1];
        int a = TargetPos[0];
        int b = TargetPos[1];
         int dx[] = {1,2,1,2,-1,-2,-1,-2};
        int dy[] = {2,1,-2,-1,2,1,-2,-1};
        int visited[n + 1][n + 1];
        memset(visited,0,sizeof(visited));
        queue<pair<int, int>> q;
        q.push({x, y});
        visited[x][y] = 1;
        int steps = 0;
        while (!q.empty())
        {
            int size = q.size();
            for (int j = 0; j < size; j++)
            {
                int currx = q.front().first;
                int curry = q.front().second;
                q.pop();
                if (currx == a && curry == b)
                    return steps;
                for (int i = 0; i < 8; i++)
                {
                    int newx = currx + dx[i];
                    int newy = curry + dy[i];
                    if (newx >= 1 && newx <= n && newy >= 1 && newy <= n && visited[newx][newy] == false)
                    {
                        visited[newx][newy] = 1;
                        q.push({newx, newy});
                    }
                }
            }
            steps++;
        }
	}
};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		vector<int>KnightPos(2);
		vector<int>TargetPos(2);
		int N;
		cin >> N;
		cin >> KnightPos[0] >> KnightPos[1];
		cin >> TargetPos[0] >> TargetPos[1];
		Solution obj;
		int ans = obj.minStepToReachTarget(KnightPos, TargetPos, N);
		cout << ans <<"\n";
	}
	return 0;
}  // } Driver Code Ends
